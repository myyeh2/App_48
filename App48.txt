

// ***  時頻數值計算(Time Frequency Numerical Computations)  ***  
// 微分方程式 : M(t) * yh''(t) + C(t) * yh'(t) + K(t) * yh(t) = dh 
// 稱此法為 : 實數與複數矩陣轉換( Real And Complex Matrix Transform )   
// 本求解法可對應於 Laplace、 Fourier、 Z Transform 或是 捲積積分法等等。 

using System;
using Matrix_0; 

namespace ConsoleApp48
{
    internal class Program
    {
        static void Main(string[] args)
        {

// 建構初始矩陣 M、K、C。
double[,] M0 = { { 19, -1.5, -2 }, { -1, 15, 0 }, { 0, -3, 27 } }; 
double[,] K0 = { {60, -8, -2}, {-16, 180, -120 }, {-20, -100, 300} };
double[,] C0 = { {35, -1, -0.5}, {-1.5, 40, -1.5}, {-1.2, -1.5, 75} }; 

// 轉爲SMS型態之矩陣。
ReMatrix M = new ReMatrix(M0); 
ReMatrix K = new ReMatrix(K0);
ReMatrix C = new ReMatrix(C0); 

// 狀態響應。速度，變位，加速度。(t = 20秒) 
double step = 1.0;
int iRow = (int)(20 / step + 1); 

int m = M.Row; 
int r = 2; 
int iColD = m * r + 1; 

CxMatrix CxVal = new CxMatrix(iRow, iColD); 
ReMatrix ReVal = new ReMatrix(iRow, iColD);

for (int i = 0; i != iRow; i++)
{
    double t = step * i; 

    // 建構 M、k、C 變數矩陣。
    M.Matrix[0, 2] = 13.3 * Math.Sin(0.85 * t);
    M.Matrix[2, 0] = -2.7 * Math.Cos(1.3 * t);  
    C.Matrix[0, 1] = -13.2 * Math.Sin(0.35 * t);  
    C.Matrix[2, 0] = 22.5 * Math.Cos(1.95 * t);  
    K.Matrix[0, 2] = -332 * Math.Sin(1.37 * t);  
    K.Matrix[2, 1] = 579 * Math.Cos(0.24 * t);  

    // 隨時間變化的系統(狀態)矩陣 A。  
    MKCMatrix mkc = new MKCMatrix(M, K, C);
    ReMatrix A = mkc.Matrix; 

    // 隨時間變化的系統特徵值矩陣 D 
    EIG eig = new EIG(A);
    CxMatrix D = eig.CxMatrixD;   

    // 將時間轉爲複數值。
    CxScalar cxScalar = new CxScalar(t, 0); 
    
    // 隨時間變化的特徵值矩陣。
    CxVal[i, 0] =  new CxMatrix(cxScalar); 
    CxVal[i, 1] = D[0, 0]; 
    CxVal[i, 2] = D[1, 1]; 
    CxVal[i, 3] = D[2, 2]; 
    CxVal[i, 4] = D[3, 3]; 
    CxVal[i, 5] = D[4, 4];
    CxVal[i, 6] = D[5, 5]; 

    // 隨時間變化的角矩陣。 
    ReVal.Matrix[i, 0] = i; 
    ReVal.Matrix[i, 1] = D[0, 0].Im[0, 0]; 
    ReVal.Matrix[i, 2] = D[1, 1].Im[0, 0]; 
    ReVal.Matrix[i, 3] = D[2, 2].Im[0, 0]; 
    ReVal.Matrix[i, 4] = D[3, 3].Im[0, 0]; 
    ReVal.Matrix[i, 5] = D[4, 4].Im[0, 0]; 
    ReVal.Matrix[i, 6] = D[5, 5].Im[0, 0]; 
}

Console.WriteLine("            時間(由實數值改為複數值)                 特徵值(Lambda0 ... Lambda5)       "); 
Console.WriteLine("\n{0}", new PR(CxVal)); 
Console.WriteLine("\n **********************************************************\n"); 
Console.WriteLine("\n*** 以下是時間與特徵值的模數(Modulus)[即複數的絕對值]大小排序的角頻率，共計有六組，可作為Excel繪圖 ***\n"); 
Console.WriteLine("        時間(sec)         角頻率(rad/sec)  （ w0  ...  w5  )\n");  
Console.WriteLine("\n{0} \n", new PR(ReVal)); 
Console.WriteLine("\n **********************************************************\n"); 
Console.WriteLine("\n時間序列\n{0}\n", new PR4(ReVal, 0)); 
Console.WriteLine("\n*** 以下是依據特定時間點，對應特徵值的模數(Modulus)[即複數的絕對值]大小排序，共計有六組，可作為Python 繪圖 ***\n");
Console.WriteLine("\n角頻率序列w0\n{0}\n", new PR4(ReVal, 1)); 
Console.WriteLine("\n角頻率序列w1\n{0}\n", new PR4(ReVal, 2)); 
Console.WriteLine("\n角頻率序列w2\n{0}\n", new PR4(ReVal, 3)); 
Console.WriteLine("\n角頻率序列w3\n{0}\n", new PR4(ReVal, 4)); 
Console.WriteLine("\n角頻率序列w4\n{0}\n", new PR4(ReVal, 5)); 
Console.WriteLine("\n角頻率序列w5\n{0}\n", new PR4(ReVal, 6)); 

        }
    }
}
